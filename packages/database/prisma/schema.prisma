generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== MULTI-TENANCY ====================

// Top-level dealer groups (e.g., "Peepee Poopoo Dealer Group")
model DealerGroup {
  id            String         @id @default(cuid())
  name          String
  subdomain     String         @unique
  logo          String?
  primaryColor  String         @default("#000000")
  website       String?
  phone         String?
  address       String?
  city          String?
  state         String?
  zip           String?
  timezone      String         @default("America/New_York")
  settings      Json           @default("{}")
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  dealerships         Dealership[]
  users               User[]
  vehicles            Vehicle[]
  feedConfigs         FeedConfig[]
  syndicationTargets  SyndicationTarget[]
  mediaSettings       MediaSettings?
  subscriptions       Subscription[]
  apiKeys             ApiKey[]
  webhooks            Webhook[]

  @@index([subdomain])
}

// Individual dealerships under a group (e.g., "Peepee Ellis Chevrolet")
model Dealership {
  id              String         @id @default(cuid())
  dealerGroupId   String
  name            String
  brand           String?        // "Chevrolet", "Ford", etc.
  dealerCode      String?        // Internal dealer code
  phone           String?
  address         String?
  city            String?
  state           String?
  zip             String?
  website         String?
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  dealerGroup     DealerGroup    @relation(fields: [dealerGroupId], references: [id], onDelete: Cascade)
  lots            Lot[]
  users           User[]
  vehicles        Vehicle[]

  @@index([dealerGroupId])
  @@index([dealerCode])
}

// Physical lots within a dealership (e.g., "New iLot", "Used iLot")
model Lot {
  id            String         @id @default(cuid())
  dealershipId  String
  name          String         // "New iLot", "Used iLot", "Service Lot", etc.
  lotType       LotType        @default(NEW)
  address       String?
  description   String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  dealership    Dealership     @relation(fields: [dealershipId], references: [id], onDelete: Cascade)
  vehicles      Vehicle[]

  @@index([dealershipId])
  @@index([lotType])
}

enum LotType {
  NEW
  USED
  SERVICE
  TRADE_IN
  AUCTION
}

// Legacy Organization model - keeping for backward compatibility
// Will eventually migrate existing organizations to DealerGroup structure
model Organization {
  id            String         @id @default(cuid())
  name          String
  subdomain     String         @unique
  logo          String?
  primaryColor  String         @default("#000000")
  website       String?
  phone         String?
  address       String?
  city          String?
  state         String?
  zip           String?
  timezone      String         @default("America/New_York")
  settings      Json           @default("{}")
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([subdomain])
  @@map("legacy_organizations")
}

model User {
  id               String           @id @default(cuid())
  dealerGroupId    String
  dealershipId     String?          // Optional - some users may have group-level access
  email            String           @unique
  password         String
  firstName        String
  lastName         String
  phone            String?
  role             UserRole
  permissions      String[]         @default([])
  avatar           String?
  isActive         Boolean          @default(true)
  lastLoginAt      DateTime?
  emailVerified    Boolean          @default(false)
  twoFactorEnabled Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  dealerGroup         DealerGroup        @relation(fields: [dealerGroupId], references: [id], onDelete: Cascade)
  dealership          Dealership?        @relation(fields: [dealershipId], references: [id], onDelete: Cascade)
  sessions            Session[]
  assignments         PhotoAssignment[]
  captureSessions     CaptureSession[]
  vehicleHistory      VehicleHistory[]
  auditLogs           AuditLog[]
  notifications       Notification[]

  @@index([dealerGroupId])
  @@index([dealershipId])
  @@index([email])
}

enum UserRole {
  OWNER
  ADMIN
  MANAGER
  SALES
  PHOTOGRAPHER
  VIEWER
}

model Session {
  id           String    @id @default(cuid())
  userId       String
  token        String    @unique
  userAgent    String?
  ipAddress    String?
  expiresAt    DateTime
  createdAt    DateTime  @default(now())

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

// ==================== INVENTORY MANAGEMENT ====================

model Vehicle {
  id                String              @id @default(cuid())
  dealerGroupId     String
  dealershipId      String
  lotId             String              // Required - every vehicle must be assigned to an iLot
  vin               String
  stockNumber       String
  status            VehicleStatus       @default(PENDING)
  
  // Basic Info
  year              Int
  make              String
  model             String
  trim              String?
  bodyStyle         String?
  
  // Details
  mileage           Int?
  exteriorColor     String?
  interiorColor     String?
  engine            String?
  transmission      String?
  drivetrain        String?
  fuelType          String?
  mpgCity           Int?
  mpgHighway        Int?
  
  // Pricing
  msrp              Decimal?            @db.Decimal(10, 2)
  invoicePrice      Decimal?            @db.Decimal(10, 2)
  askingPrice       Decimal?            @db.Decimal(10, 2)
  salePrice         Decimal?            @db.Decimal(10, 2)
  internetPrice     Decimal?            @db.Decimal(10, 2)
  
  // Additional Info
  description       String?             @db.Text
  features          String[]            @default([])
  options           Json?
  condition         VehicleCondition    @default(USED)
  certified         Boolean             @default(false)
  certificationProgram String?
  
  // Dates
  dateInStock       DateTime?
  dateSold          DateTime?
  daysOnLot         Int                 @default(0)
  
  // Location
  locationName      String?
  locationCode      String?
  row               String?
  spot              String?
  
  // Metadata
  sourceType        DataSource          @default(MANUAL)
  sourceFeedId      String?
  lastSyncedAt      DateTime?
  isDeleted         Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  dealerGroup       DealerGroup         @relation(fields: [dealerGroupId], references: [id], onDelete: Cascade)
  dealership        Dealership          @relation(fields: [dealershipId], references: [id], onDelete: Cascade)
  lot               Lot                 @relation(fields: [lotId], references: [id], onDelete: Cascade)
  media             VehicleMedia[]
  history           VehicleHistory[]
  assignments       PhotoAssignment[]
  syndicationQueue  SyndicationQueue[]
  leads             Lead[]
  priceHistory      PriceHistory[]

  @@unique([dealerGroupId, vin])
  @@unique([dealershipId, stockNumber])
  @@index([dealerGroupId])
  @@index([dealershipId])
  @@index([lotId])
  @@index([status])
  @@index([vin])
}

enum VehicleStatus {
  PENDING
  IN_TRANSIT
  IN_RECON
  READY
  ON_LOT
  PENDING_SALE
  SOLD
  WHOLESALE
  DELETED
}

enum VehicleCondition {
  NEW
  USED
  CPO
}

enum DataSource {
  MANUAL
  VAUTO
  HOMENET
  DMS
  API
}

model VehicleMedia {
  id              String          @id @default(cuid())
  vehicleId       String
  type            MediaType
  url             String
  thumbnailUrl    String?
  cdnUrl          String?
  order           Int             @default(0)
  caption         String?
  metadata        Json?
  fileSize        Int?
  width           Int?
  height          Int?
  duration        Int?            // For videos, in seconds
  isProcessed     Boolean         @default(false)
  
  // vAuto/Feed Sync Status  
  syncedToVAuto   Boolean         @default(false)
  vAutoMediaId    String?         // vAuto's ID for this media
  vAutoUrl        String?         // URL vAuto assigns to our media
  lastSyncAt      DateTime?
  syncStatus      MediaSyncStatus @default(PENDING)
  syncError       String?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  vehicle         Vehicle         @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([vehicleId])
  @@index([type])
  @@index([syncStatus])
}

enum MediaType {
  PHOTO_EXTERIOR
  PHOTO_INTERIOR
  PHOTO_ENGINE
  PHOTO_DETAIL
  VIDEO_WALKAROUND
  VIDEO_FEATURE
  VIDEO_TESTIMONIAL
  WINDOW_STICKER
  CARFAX
}

enum MediaSyncStatus {
  PENDING
  UPLOADING
  SYNCED
  FAILED
  DELETED
}

model VehicleHistory {
  id              String          @id @default(cuid())
  vehicleId       String
  userId          String?
  action          String
  details         Json?
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime        @default(now())

  vehicle         Vehicle         @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  user            User?           @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([vehicleId])
  @@index([userId])
}

// ==================== PHOTOGRAPHY WORKFLOW ====================

model PhotoAssignment {
  id                String              @id @default(cuid())
  vehicleId         String
  photographerId    String
  status            AssignmentStatus    @default(PENDING)
  priority          Int                 @default(0)
  notes             String?
  scheduledFor      DateTime?
  completedAt       DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  vehicle           Vehicle             @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  photographer      User                @relation(fields: [photographerId], references: [id])
  captureSessions   CaptureSession[]

  @@index([vehicleId])
  @@index([photographerId])
  @@index([status])
}

enum AssignmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

model CaptureSession {
  id              String          @id @default(cuid())
  assignmentId    String
  photographerId  String
  deviceInfo      Json?
  startedAt       DateTime        @default(now())
  completedAt     DateTime?
  photosCount     Int             @default(0)
  videosCount     Int             @default(0)
  uploadProgress  Int             @default(0)
  metadata        Json?

  assignment      PhotoAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  photographer    User            @relation(fields: [photographerId], references: [id])

  @@index([assignmentId])
  @@index([photographerId])
}

// ==================== FEED MANAGEMENT ====================

model FeedConfig {
  id              String          @id @default(cuid())
  dealerGroupId   String
  provider        FeedProvider
  name            String
  credentials     Json            // Encrypted
  mappingRules    Json?
  
  // Import Settings (vAuto -> Us)
  importSchedule  String?         @default("0 */6 * * *") // Every 6 hours
  lastImportAt    DateTime?
  nextImportAt    DateTime?
  
  // Export Settings (Us -> vAuto)
  exportSchedule  String?         @default("0 */4 * * *") // Every 4 hours  
  lastExportAt    DateTime?
  nextExportAt    DateTime?
  enableExport    Boolean         @default(true)
  
  // Bidirectional Sync Settings
  syncPricing     Boolean         @default(true)
  syncPhotos      Boolean         @default(true)
  syncVideos      Boolean         @default(true)
  syncMediaUrls   Boolean         @default(true)   // Push our CDN URLs to vAuto
  syncStatus      Boolean         @default(true)
  syncLocation    Boolean         @default(true)
  syncDescription Boolean         @default(false)
  
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  dealerGroup     DealerGroup     @relation(fields: [dealerGroupId], references: [id], onDelete: Cascade)
  feedLogs        FeedLog[]

  @@index([dealerGroupId])
  @@index([provider])
}

enum FeedProvider {
  VAUTO
  HOMENET
  DMS
  FTP
  API
}

model FeedLog {
  id              String          @id @default(cuid())
  feedConfigId    String
  status          FeedStatus
  startedAt       DateTime
  completedAt     DateTime?
  recordsProcessed Int            @default(0)
  recordsCreated  Int             @default(0)
  recordsUpdated  Int             @default(0)
  recordsFailed   Int             @default(0)
  errors          Json?
  rawData         String?         @db.Text

  feedConfig      FeedConfig      @relation(fields: [feedConfigId], references: [id], onDelete: Cascade)

  @@index([feedConfigId])
  @@index([status])
}

enum FeedStatus {
  RUNNING
  SUCCESS
  PARTIAL
  FAILED
}

// ==================== SYNDICATION ====================

model SyndicationTarget {
  id              String              @id @default(cuid())
  organizationId  String
  platform        SyndicationPlatform
  name            String
  credentials     Json                // Encrypted
  settings        Json?
  isActive        Boolean             @default(true)
  lastSyncAt      DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  organization    Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  queue           SyndicationQueue[]

  @@index([organizationId])
  @@index([platform])
}

enum SyndicationPlatform {
  AUTOTRADER
  CARS_COM
  CARGURUS
  FACEBOOK
  CRAIGSLIST
  CUSTOM_FEED
}

model SyndicationQueue {
  id              String              @id @default(cuid())
  vehicleId       String
  targetId        String
  action          SyndicationAction
  status          SyndicationStatus   @default(PENDING)
  attempts        Int                 @default(0)
  lastAttemptAt   DateTime?
  completedAt     DateTime?
  error           String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  vehicle         Vehicle             @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  target          SyndicationTarget   @relation(fields: [targetId], references: [id], onDelete: Cascade)

  @@index([vehicleId])
  @@index([targetId])
  @@index([status])
}

enum SyndicationAction {
  CREATE
  UPDATE
  DELETE
}

enum SyndicationStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  CANCELLED
}

// ==================== ADDITIONAL FEATURES ====================

model Lead {
  id              String          @id @default(cuid())
  vehicleId       String?
  firstName       String
  lastName        String
  email           String
  phone           String?
  message         String?         @db.Text
  source          String?
  status          LeadStatus      @default(NEW)
  assignedTo      String?
  metadata        Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  vehicle         Vehicle?        @relation(fields: [vehicleId], references: [id], onDelete: SetNull)

  @@index([vehicleId])
  @@index([status])
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}

model PriceHistory {
  id              String          @id @default(cuid())
  vehicleId       String
  priceType       String
  oldPrice        Decimal         @db.Decimal(10, 2)
  newPrice        Decimal         @db.Decimal(10, 2)
  reason          String?
  changedBy       String?
  createdAt       DateTime        @default(now())

  vehicle         Vehicle         @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([vehicleId])
}

model MediaSettings {
  id                  String          @id @default(cuid())
  organizationId      String          @unique
  photoQuality        Int             @default(85)
  videoQuality        String          @default("1080p")
  videoDuration       Int             @default(120) // seconds
  transitionDuration  Int             @default(500) // milliseconds
  watermarkEnabled    Boolean         @default(false)
  watermarkUrl        String?
  autoEnhance         Boolean         @default(true)
  compressionEnabled  Boolean         @default(true)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  organization        Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Subscription {
  id              String          @id @default(cuid())
  organizationId  String
  plan            String
  status          String
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean      @default(false)
  metadata        Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model ApiKey {
  id              String          @id @default(cuid())
  organizationId  String
  name            String
  key             String          @unique
  permissions     String[]        @default([])
  lastUsedAt      DateTime?
  expiresAt       DateTime?
  createdAt       DateTime        @default(now())
  revokedAt       DateTime?

  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([key])
}

model Webhook {
  id              String          @id @default(cuid())
  organizationId  String
  url             String
  events          String[]
  secret          String
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model AuditLog {
  id              String          @id @default(cuid())
  userId          String?
  action          String
  entityType      String
  entityId        String
  changes         Json?
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime        @default(now())

  user            User?           @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([entityType, entityId])
}

model Notification {
  id              String          @id @default(cuid())
  userId          String
  type            String
  title           String
  message         String          @db.Text
  data            Json?
  isRead          Boolean         @default(false)
  createdAt       DateTime        @default(now())

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
}